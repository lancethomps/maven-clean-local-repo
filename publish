#!/usr/bin/env bash
################################################################### SETUP ########################################################################
S="${BASH_SOURCE[0]}" && while [ -h "$S" ]; do D="$(cd -P "$(dirname "$S")" && pwd)" && S="$(readlink "$S")" && [[ $S != /* ]] && S="$D/$S"; done || true && _SCRIPT_DIR="$(cd -P "$(dirname "$S")" && pwd)" && unset S D
set -o errexit -o errtrace -o nounset
# shellcheck disable=SC2155
export GPG_TTY="$(tty)"
export vers_bump_type="minor"
##################################################################################################################################################

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"

function _usage() {
  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME}" | wc -c)" </dev/zero | tr '\0' " ")"

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME} [--auto-confirm] [--bump-major] [--bump-minor] [--bump-patch] [--next-only] [--test] [--next-version <NEXT_VERS>]
       ${SYNOP_INDENT} [--help] [--debug] [--verbose]

EXAMPLES
       ${_SCRIPT_NAME}
       ${_SCRIPT_NAME} --auto-confirm
       ${_SCRIPT_NAME} --bump-patch
       ${_SCRIPT_NAME} --test
       ${_SCRIPT_NAME} --next-version 3.5.4
EOF
}
##################################################################################################################################################

################################################################# SCRIPTARGS #####################################################################
while test $# -gt 0; do
  case "$1" in
    -h | --help)
      _usage
      exit 0
      ;;
    --debug)
      shift
      export debug_mode=true
      ;;
    --verbose)
      shift
      export verbose=true
      ;;
    --auto-confirm)
      shift
      auto_confirm=true
      ;;
    --bump-major)
      vers_bump_type="major"
      shift
      ;;
    --bump-minor)
      vers_bump_type="minor"
      shift
      ;;
    --bump-patch)
      vers_bump_type="patch"
      shift
      ;;
    --next-only)
      next_only=true
      shift
      ;;
    --test)
      shift
      test_mode=true
      ;;
    --next-version)
      shift
      export NEXT_VERS="$1"
      export has_custom_next_version=true
      shift
      ;;
    *)
      echo "Unknown option: $1"
      _usage
      exit 1
      ;;
  esac
done
##################################################################################################################################################

################################################################# COMMON COPY ####################################################################
function repeat_char() {
  head -c "$2" </dev/zero | tr '\0' "$1"
}
function get_sep_cols() {
  local sep_cols=160 term_cols
  if command -v 'get_terminal_columns' >/dev/null 2>&1; then
    term_cols="$(get_terminal_columns)"
    if test -n "$term_cols"; then
      sep_cols="$term_cols"
    fi
  fi
  if test -n "${1-}"; then
    sep_cols="$((sep_cols / $1))"
  fi
  echo -n "$sep_cols"
}
function log_sep() {
  if test -z "${TERMINAL_SEP-}"; then
    local rep_count
    rep_count=$(get_sep_cols 2)
    TERMINAL_SEP="$(repeat_char '-' "$rep_count")"
    export TERMINAL_SEP
  fi
  echo "$TERMINAL_SEP"
}
function log_with_sep_around() {
  log_sep
  echo "$@"
  log_sep
}
function check_debug() {
  check_true "${debug_mode-}"
}
function check_true() {
  if test -z "${1-}"; then
    return 1
  fi
  local val="${1,,}"
  test "$val" = "true" && return 0 || test "$val" = "1" && return 0 || test "$val" = "yes" && return 0 || test "$val" = "y" && return 0 || return 1
}
function confirm() {
  local response=""
  read -r -p "${1:-Are you sure?}"$'\n'"[Y/n]> " response
  case "$response" in
    [yY][eE][sS] | [yY] | "") true ;;
    [nN][oO] | [nN]) false ;;
    *)
      echo "Incorrect value entered... Try again."
      confirm "$@"
      ;;
  esac
}
function confirm_with_auto() {
  if test "${auto_confirm-}" = 'true'; then
    echo "AUTO CONFIRMED: ${1-}"
    return 0
  fi
  confirm "$@"
}
##################################################################################################################################################

#################################################################### MAIN ########################################################################
function exiting() {
  echo "Exiting..."
  exit "${1:-1}"
}

function check_test() {
  test "${test_mode-}" = "true"
}

function check_next_only() {
  test "${next_only-}" = "true"
}

function exit_if_test() {
  if check_test; then
    echo "In test_mode, exiting..."
    exit 0
  fi
  return 0
}

function continue_because_debug() {
  if check_debug; then
    echo "Not exiting, as debug_mode is true..."
    return 0
  elif check_test; then
    echo "Not exiting, as test_mode is true..."
    return 0
  else
    return 1
  fi
}

function check_git_default_branch() {
  if git is-side-branch; then
    if check_next_only; then
      return 0
    fi
    echo "Git repo not on the default branch (eg master, main)! Make a PR to the default branch first"
    if continue_because_debug; then
      return 0
    fi
    git status
    exiting 1
  fi
  return 0
}

function check_git_dirty() {
  if git is-dirty; then
    echo "Git repo is dirty!"
    if continue_because_debug; then
      return 0
    elif check_next_only; then
      return 0
    fi
    git status
    exiting 1
  fi
  return 0
}

function check_git_missing_commits() {
  git fetch
  if git has-incoming-commits; then
    echo "Git repo is missing commits from remote!"
    if continue_because_debug; then
      return 0
    fi
    git status
    exiting 1
  elif git has-outgoing-commits; then
    echo "Git repo has local commits!"
    if continue_because_debug; then
      return 0
    fi
    git status
    exiting 1
  fi
  return 0
}

function check_version_bumped() {
  if check_debug || check_test; then
    return 0
  fi

  if ! git is-dirty; then
    echo "Bad __custom_next_version_bump function, nothing appears to have been changed"
    exiting 1
  fi
  return 0
}

function increment_semver() {
  local version major=0 minor=0 patch=0 reset_all reset_minor reset_patch
  while test $# -gt 0; do
    case "$1" in
      --major)
        shift
        major="$1"
        shift
        ;;
      --minor)
        shift
        minor="$1"
        shift
        ;;
      --patch)
        shift
        patch="$1"
        shift
        ;;
      --reset-all)
        reset_all=true
        shift
        ;;
      --reset-minor)
        reset_minor=true
        shift
        ;;
      --reset-patch)
        reset_patch=true
        shift
        ;;
      --)
        shift
        break
        ;;
      -*)
        echo "Unknown option: $1"
        _usage
        exit 1
        ;;
      *)
        break
        ;;
    esac
  done

  version="$1"

  if test "${reset_all-}" = "true"; then
    if test "$patch" -eq 0; then
      reset_patch=true
      if test "$minor" -eq 0; then
        reset_minor=true
      fi
    fi
  fi

  if test "${reset_minor-}" = "true"; then
    if test "$minor" -ne 0; then
      echo "Cannot specify --reset-minor along with a --minor argument"
      return 1
    fi
    minor="-$(echo "$version" | awk -F. '{print $2}')"
  fi

  if test "${reset_patch-}" = "true"; then
    if test "$patch" -ne 0; then
      echo "Cannot specify --reset-patch along with a --patch argument"
      return 1
    fi
    patch="-$(echo "$version" | awk -F. '{print $3}')"
  fi

  echo "$version" |
    awk -F. -v a="$major" -v b="$minor" -v c="$patch" '{printf("%d.%d.%d", $1+a, $2+b , $3+c)}'
}

function clean_local() {
  __custom_clean_local
}

function store_versions() {
  __custom_store_versions

  if test -z "${VERSION_FILE-}"; then
    echo "Bad __custom_store_versions function, VERSION_FILE variable not set"
    exiting 1
  elif test -z "${CURR_VERS-}"; then
    echo "Bad __custom_store_versions function, CURR_VERS variable not set"
    exiting 1
  elif test -z "${NEXT_VERS-}"; then
    echo "Bad __custom_store_versions function, NEXT_VERS variable not set"
    exiting 1
  fi
  return 0
}

function display_info_and_confirm() {
  local display_infos=(
    auto_confirm "${auto_confirm:-false}"
    debug_mode "${debug_mode:-false}"
    test_mode "${test_mode:-false}"
    verbose "${verbose:-false}"
    vers_bump_type "$vers_bump_type"
    VERSION_FILE "$VERSION_FILE"
    CURR_VERS "$CURR_VERS"
    NEXT_VERS "$NEXT_VERS"
  )

  log_sep

  while test "${#display_infos[@]}" -gt 0; do
    printf "%-50s -> %s\n" "${display_infos[0]}" "${display_infos[1]}"
    display_infos=("${display_infos[@]:2}")
  done

  log_sep

  if ! confirm_with_auto "Continue with publish?"; then
    exiting 1
  fi
  return 0
}

function publish_command() {
  check_git_dirty

  if ! confirm_with_auto "Publish version ${CURR_VERS}?"; then
    exiting 1
  fi

  __custom_publish
  exit_if_test
}

function tag_version() {
  if ! confirm_with_auto "Tag version ${CURR_VERS}?"; then
    exiting 1
  fi

  if check_debug; then
    echo git tag "v${CURR_VERS}"
    echo git push --tags
  else
    git tag "v${CURR_VERS}"
    git push --tags
  fi
}

function _next_version_branch() {
  if check_debug; then
    echo git checkout -b "$NEXT_BRANCH"
    echo git push --set-upstream origin "$NEXT_BRANCH"
  else
    git checkout -b "$NEXT_BRANCH"
    git push --set-upstream origin "$NEXT_BRANCH"
  fi
}

function _next_version_commit() {
  if check_debug; then
    echo git commit -m "Prepare next version" -- "$VERSION_FILE"
  else
    git commit -m "Prepare next version" -- "$VERSION_FILE"
  fi
}

function next_version() {
  check_git_dirty

  NEXT_BRANCH="${NEXT_BRANCH:-dev-v${NEXT_VERS}}"
  export NEXT_BRANCH

  if ! confirm_with_auto "Bump ${CURR_VERS} to next minor version (${NEXT_VERS}) in a new branch (${NEXT_BRANCH})?"; then
    exiting 0
  fi

  _next_version_branch
  __custom_next_version_bump
  check_version_bumped
  _next_version_commit

  if ! confirm_with_auto "Push version bump updates to new branch ${NEXT_BRANCH}?"; then
    exiting 0
  fi

  if check_debug; then
    echo git push
  else
    git push
  fi
}

function main() {
  cd "$_SCRIPT_DIR"

  check_git_default_branch
  check_git_dirty
  check_git_missing_commits
  clean_local
  store_versions
  display_info_and_confirm
  if ! check_next_only; then
    publish_command
    tag_version
  fi
  next_version
}
##################################################################################################################################################

#################################################################### CUSTOM ######################################################################
function __custom_clean_local() {
  local target_dirs target_dirs_add
  target_dirs=(target)
  mapfile -t target_dirs_add < <(git ls-files --others --ignored --exclude-standard --directory -- ':(glob)**/target/**')
  target_dirs+=("${target_dirs_add[@]}")
  git clean -Xd --force -- "${target_dirs[@]}"
}

function __custom_store_versions() {
  VERSION_FILE=':(glob)**/pom.xml'
  if check_test; then
    CURR_VERS="$(make echo-version-current)"
  else
    CURR_VERS="$(make echo-version-current-release)"
  fi
  if test -z "${NEXT_VERS-}"; then
    if ! NEXT_VERS="$(make "echo-version-next-${vers_bump_type}")"; then
      echo "Failed to create NEXT_VERS"
      exiting
    fi
  fi
  export VERSION_FILE CURR_VERS NEXT_VERS
}

function __custom_publish() {
  if check_debug; then
    ! check_test && echo make version-release || true
    ! check_test && echo git commit -m "v${CURR_VERS}" -- "$VERSION_FILE" || true
    echo make deploy
    ! check_test && echo git push || true
  else
    if ! check_test; then
      make version-release
      git commit -m "v${CURR_VERS}" -- "$VERSION_FILE"
    fi
    make deploy
    if ! check_test; then
      git push
    fi
  fi
}

function __custom_next_version_bump() {
  if test "${has_custom_next_version-}" = "true"; then
    if check_debug; then
      echo mvn versions:set -DgenerateBackupPoms=false -DprocessAllModules=true -DnewVersion="${NEXT_VERS}-SNAPSHOT"
    else
      mvn versions:set -DgenerateBackupPoms=false -DprocessAllModules=true -DnewVersion="${NEXT_VERS}-SNAPSHOT"
    fi
  else
    if check_debug; then
      echo make "version-bump-${vers_bump_type}-snapshot"
    else
      make "version-bump-${vers_bump_type}-snapshot"
    fi
  fi
}
##################################################################################################################################################

main
